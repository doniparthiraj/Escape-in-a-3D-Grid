#include<bits/stdc++.h>
using namespace std;
class que
{
    public:
    int ht;
    int row;
    int col;
    int dis;
    que(int x,int y,int z,int v)
    {
        ht=x,row=y,col=z,dis=v;
    }
};
int path(vector< vector < vector < char > > >&v,int x,int r,int c)
{
    que src(0,0,0,0);
    bool vis[x][r][c];
    for(int i=0;i<x;i++)
    {
        for(int j=0;j<r;j++)
        {
            for(int k=0;k<c;k++)
            {
                if(v[i][j][k]=='#')
                vis[i][j][k]=1;
                else
                vis[i][j][k]=0;
                if(v[i][j][k]=='S')
                {
                src.ht=i;
                src.row=j;
                src.col=k;
                }
            }
        }
    }
    queue<que> qu;
    qu.push(src);
    while(!qu.empty())
    {
        que p=qu.front();
        qu.pop();
        if(v[p.ht][p.row][p.col]=='E')
        return p.dis;
        if(p.ht-1>=0 && vis[p.ht-1][p.row][p.col]==0)
            {
                que tmp(p.ht-1,p.row,p.col,p.dis+1);
                qu.push(tmp);
                vis[tmp.ht][tmp.row][tmp.col]=1;
            }
            if(p.ht+1<x && vis[p.ht+1][p.row][p.col]==0)
            {
                que tmp(p.ht+1,p.row,p.col,p.dis+1);
                qu.push(tmp);
                vis[tmp.ht][tmp.row][tmp.col]=1;
            }
            if(p.row-1>=0 && vis[p.ht][p.row-1][p.col]==0)
            {
                que tmp(p.ht,p.row-1,p.col,p.dis+1);
                qu.push(tmp);
                vis[tmp.ht][tmp.row][tmp.col]=1;
            }
            if(p.col-1>=0 && vis[p.ht][p.row][p.col-1]==0)
            {
                que tmp(p.ht,p.row,p.col-1,p.dis+1);
                qu.push(tmp);
                vis[tmp.ht][tmp.row][tmp.col]=1;
            }
            if(p.row+1<r && vis[p.ht][p.row+1][p.col]==0)
            {
                que tmp(p.ht,p.row+1,p.col,p.dis+1);
                qu.push(tmp);
                vis[tmp.ht][tmp.row][tmp.col]=1;
            }
            if(p.col+1<c && vis[p.ht][p.row][p.col+1]==0)
            {
                que tmp(p.ht,p.row,p.col+1,p.dis+1);
                qu.push(tmp);
                vis[tmp.ht][tmp.row][tmp.col]=1;
            }
    }
    return -1;
}
int main()
{
    int x,r,c;
    while(1)
    {
    cin>>x>>r>>c;
    if(x==0 && r==0 && c==0)
    break;
    vector<vector<vector<char>>>v(x, vector<vector<char>>(r,vector<char>(c)));
    for(int i=0;i<x;i++)
    for(int j=0;j<r;j++)
    for(int k=0;k<c;k++)
    cin>>v[i][j][k];
    int ans=path(v,x,r,c);
    if(ans==-1)
    cout<<"Trapped!\n";
    else
    cout<<"Escaped in "<<ans<<" minute(s).\n";
    }
}
